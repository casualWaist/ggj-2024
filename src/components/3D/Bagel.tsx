/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 ../../WebStormProjects/ggj-2024/public/3DModels/Bagel.glb -F -t -O -b -o ../../WebStormProjects/ggj-2024/src/components/3D/Bagel.tsx
*/

import * as THREE from 'three'
import { forwardRef } from 'react'
import { useGLTF, Outlines } from '@react-three/drei'
import { GLTF } from 'three-stdlib'

type GLTFResult = GLTF & {
  nodes: {
    bagel: THREE.Mesh
  }
  materials: {
    ['color chart']: THREE.MeshStandardMaterial
  }
}

type Props = JSX.IntrinsicElements['group']

const Bagel = forwardRef<THREE.Group, Props>((props: Props, ref) => {
  const { nodes, materials } = useGLTF('/3DModels/Bagel.glb') as GLTFResult

  return (
    <group ref={ref} {...props} dispose={null}>
      <mesh geometry={nodes.bagel.geometry} rotation={[Math.PI * 0.5, Math.PI, 0]}>
        <Outlines />
        <meshBasicMaterial map={materials['color chart'].map} />
      </mesh>
      <group position={[0, 1.75, 1.25]} rotation={[0, Math.PI, 0]} scale={0.5}>
          {props.children}
      </group>
    </group>
  )
})
export default Bagel

useGLTF.preload('/3DModels/Bagel.glb')
